openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: http://localhost:4000/

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. body does not contain required fields
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example:
                      [
                        'request body does not contain required fields',
                        'password must be a string',
                      ]
                    description: error message
                  error:
                    type: string
                    example: 'Bad request'
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get single user by id
      description: Get single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. userId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === userId doesn't exist"
    put:
      tags:
        - Users
      summary: Update a user's password
      description: Updates a user's password by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: The user's old password
                newPassword:
                  type: string
                  description: The user's new password
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: TestUser
                  version:
                    type: integer
                    example: 2
                  createAt:
                    type: integer
                    example: 1655000000
                  updateAt:
                    type: integer
                    example: 1655999999
        400:
          description: Bad request. userId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        403:
          description: oldPassword is wrong
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 403
                    description: error code
                  message:
                    type: string
                    example: 'oldPassword is wrong'
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === userId doesn't exist"
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request. userId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === userId doesn't exist"
  /track:
    get:
      tags:
        - Tracks
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      tags:
        - Tracks
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                albumId:
                  type: string
                  format: uuid
                duration:
                  type: integer
                  description: In seconds
              required:
                - name
                - duration
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. body does not contain required fields
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example:
                      [
                        'name must be a string',
                        'duration must be a number conforming to the specified constraints',
                      ]
                    description: error message
                  error:
                    type: string
                    example: 'Bad request'
  /track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Tracks
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. trackId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Track was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === trackId doesn't exist"
    put:
      tags:
        - Tracks
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: In seconds
                  example: 355
                albumId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - duration
      responses:
        200:
          description: The track has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Bohemian Rhapsody
                  artistId:
                    type: string
                    format: uuid
                    nullable: true
                  duration:
                    type: integer
                    description: In seconds
                    example: 355
                  albumId:
                    type: string
                    format: uuid
                    nullable: true
        400:
          description: Bad request. trackId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Track was not found
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === trackId doesn't exist"
    delete:
      tags:
        - Tracks
      summary: Delete track
      description: Delete track from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. trackId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Track was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === trackId doesn't exist"
  /album:
    get:
      tags:
        - Albums
      summary: Get albums list
      description: Gets all library albums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      tags:
        - Albums
      summary: Add new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        201:
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. body does not contain required fields
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example:
                      [
                        'name must be a string',
                        'year must be a number conforming to the specified constraints',
                      ]
                    description: error message
                  error:
                    type: string
                    example: 'Bad request'
  /album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Albums
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Album was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === albumId doesn't exist"
    put:
      tags:
        - Albums
      summary: Update album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Album was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === albumId doesn't exist"
    delete:
      tags:
        - Albums
      summary: Delete album
      description: Delete album from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. albumId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Album was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === albumId doesn't exist"
  /artist:
    get:
      tags:
        - Artists
      summary: Get all artists
      description: Gets all artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - Artists
      summary: Add new artist
      description: Add new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. body does not contain required fields
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example:
                      [
                        'name must be a string',
                        'grammy must be a boolean value',
                      ]
                    description: error message
                  error:
                    type: string
                    example: 'Bad request'
  /artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artists
      summary: Get single artist by id
      description: Get single artist by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Artist was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === artistId doesn't exist"
    put:
      tags:
        - Artists
      summary: Update artist information
      description: Update artist information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        200:
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Artist was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === artistId doesn't exist"
    delete:
      tags:
        - Artists
      summary: Delete artist
      description: Delete artist from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Artist was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: "record with id === artistId doesn't exist"
  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Added successfully
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  message:
                    type: string
                    example: 'track with id === trackId exists, and was successfully added to favorites'
                    description: message
        400:
          description: Bad. trackId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        422:
          description: Track with id doesn't exist.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 422
                    description: error code
                  message:
                    type: string
                    example: "track with id === trackId doesn't exist"
    delete:
      tags:
        - Favorites
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad. trackId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Track was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: 'corresponding track is not favorite'
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad. albumId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        422:
          description: Album with id doesn't exist.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 422
                    description: error code
                  message:
                    type: string
                    example: "album with id === albumId doesn't exist"
    delete:
      tags:
        - Favorites
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad. albumId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Album was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: 'corresponding album is not favorite'
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        422:
          description: Artist with id doesn't exist.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 422
                    description: error code
                  message:
                    type: string
                    example: "artist with id === artistId doesn't exist"
    delete:
      tags:
        - Favorites
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 400
                    description: error code
                  message:
                    type: string
                    example: 'id is invalid (not uuid)'
        404:
          description: Artist was not found.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  statusCode:
                    type: integer
                    example: 404
                    description: error code
                  message:
                    type: string
                    example: 'corresponding artist is not favorite'
